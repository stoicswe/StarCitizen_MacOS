From 9f006946f4c54527912094c63ffb096b69f24ef5 Mon Sep 17 00:00:00 2001
From: dblark <dblark@stu.pku.edu.cn>
Date: Tue, 8 Apr 2025 03:05:26 +0800
Subject: [PATCH 3/5] wined3d moltenvk hacks

---
 dlls/wined3d/adapter_vk.c | 26 +++++++++++++++++++++++++-
 dlls/wined3d/context_vk.c | 35 +++++++++++++++++++++++++++++++----
 dlls/wined3d/directx.c    | 14 +++++++++++++-
 dlls/wined3d/swapchain.c  |  8 +++++++-
 dlls/wined3d/wined3d_vk.h |  4 +++-
 5 files changed, 79 insertions(+), 8 deletions(-)

diff --git a/dlls/wined3d/adapter_vk.c b/dlls/wined3d/adapter_vk.c
index ca11ec480d2..5ec21fb852e 100644
--- a/dlls/wined3d/adapter_vk.c
+++ b/dlls/wined3d/adapter_vk.c
@@ -2291,6 +2291,7 @@ static void wined3d_adapter_vk_init_d3d_info(struct wined3d_adapter_vk *adapter_
     struct wined3d_vertex_caps vertex_caps;
     unsigned int sample_counts_mask;
     struct shader_caps shader_caps;
+    bool moltenvk;
 
     get_physical_device_info(adapter_vk, &device_info);
 
@@ -2365,7 +2366,9 @@ static void wined3d_adapter_vk_init_d3d_info(struct wined3d_adapter_vk *adapter_
 
     d3d_info->multisample_draw_location = WINED3D_LOCATION_TEXTURE_RGB;
 
-    vk_info->multiple_viewports = device_info.features2.features.multiViewport;
+    /* HACK: Disable multiple viewports when running with MoltenVK. As of writing, it causes glitches in multiple games. */
+    moltenvk = adapter_vk->driver_properties.driverID == VK_DRIVER_ID_MOLTENVK;
+    if (!moltenvk) vk_info->multiple_viewports = device_info.features2.features.multiViewport;
     vk_info->uav_read_without_format = device_info.features2.features.shaderStorageImageReadWithoutFormat;
     vk_info->dynamic_state2 = device_info.dynamic_state2_features.extendedDynamicState2;
     vk_info->dynamic_patch_vertex_count = device_info.dynamic_state2_features.extendedDynamicState2PatchControlPoints;
@@ -2409,6 +2412,7 @@ static bool wined3d_adapter_vk_init_device_extensions(struct wined3d_adapter_vk
         {VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME,       ~0u},
         {VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,          ~0u},
         {VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,    ~0u},
+        {VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME,           VK_API_VERSION_1_2},
         {VK_KHR_MAINTENANCE1_EXTENSION_NAME,                VK_API_VERSION_1_1, true},
         {VK_KHR_MAINTENANCE2_EXTENSION_NAME,                VK_API_VERSION_1_1},
         {VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,VK_API_VERSION_1_2},
@@ -2556,12 +2560,32 @@ static BOOL wined3d_adapter_vk_init(struct wined3d_adapter_vk *adapter_vk,
     properties2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
     properties2.pNext = &id_properties;
 
+    memset(&adapter_vk->driver_properties, 0, sizeof(adapter_vk->driver_properties));
+    adapter_vk->driver_properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
+    id_properties.pNext = &adapter_vk->driver_properties;
+
     if (vk_info->vk_ops.vkGetPhysicalDeviceProperties2)
         VK_CALL(vkGetPhysicalDeviceProperties2(adapter_vk->physical_device, &properties2));
     else
         VK_CALL(vkGetPhysicalDeviceProperties(adapter_vk->physical_device, &properties2.properties));
     adapter_vk->device_limits = properties2.properties.limits;
 
+    /* CW HACK 18311: Use the Vulkan renderer on macOS for d3d10/11. */
+    if (wined3d_settings.renderer == WINED3D_RENDERER_AUTO)
+    {
+        bool d3d10 = !(wined3d_creation_flags & WINED3D_PIXEL_CENTER_INTEGER);
+        bool moltenvk = adapter_vk->driver_properties.driverID == VK_DRIVER_ID_MOLTENVK;
+
+        if (!moltenvk || !d3d10)
+        {
+            if (!moltenvk)
+                TRACE("Not running on MoltenVK, defaulting to the OpenGL backend.\n");
+            if (!d3d10)
+                TRACE("Application using < d3d10 API, defaulting to the OpenGL backend.\n");
+            goto fail_vulkan;
+        }
+    }
+
     VK_CALL(vkGetPhysicalDeviceMemoryProperties(adapter_vk->physical_device, &adapter_vk->memory_properties));
 
     if (id_properties.deviceLUIDValid)
diff --git a/dlls/wined3d/context_vk.c b/dlls/wined3d/context_vk.c
index 7fea48d83d2..540a88a022e 100644
--- a/dlls/wined3d/context_vk.c
+++ b/dlls/wined3d/context_vk.c
@@ -2946,6 +2946,7 @@ static bool wined3d_context_vk_begin_render_pass(struct wined3d_context_vk *cont
     unsigned int fb_width, fb_height, fb_layer_count;
     struct wined3d_rendertarget_view_vk *rtv_vk;
     struct wined3d_rendertarget_view *view;
+    struct wined3d_adapter_vk *adapter_vk;
     const VkPhysicalDeviceLimits *limits;
     struct wined3d_query_vk *query_vk;
     VkCommandBuffer vk_command_buffer;
@@ -2953,12 +2954,14 @@ static bool wined3d_context_vk_begin_render_pass(struct wined3d_context_vk *cont
     unsigned int attachment_count, i;
     struct wined3d_texture *texture;
     VkFramebufferCreateInfo fb_desc;
+    int offset_x = 0, offset_y = 0;
     VkResult vr;
 
     if (context_vk->vk_render_pass)
         return true;
 
-    limits = &wined3d_adapter_vk(device_vk->d.adapter)->device_limits;
+    adapter_vk = wined3d_adapter_vk(device_vk->d.adapter);
+    limits = &adapter_vk->device_limits;
     fb_width = limits->maxFramebufferWidth;
     fb_height = limits->maxFramebufferHeight;
     fb_layer_count = limits->maxFramebufferLayers;
@@ -3077,6 +3080,28 @@ static bool wined3d_context_vk_begin_render_pass(struct wined3d_context_vk *cont
     fb_desc.height = fb_height;
     fb_desc.layers = fb_layer_count;
 
+    /* CX Hack 20098: on Apple's tiled GPUs, we should trim the render area, so that it doesn't
+     * try to preallocate huge amounts of memory for rasterization when there's no attachments.
+     * For now, let's always do that if we're running with MoltenVK. We could detect only
+     * the tiled architecture GPUs if needed.
+     * Note that multiple viewports are disabled when using MoltenVK (for bug 22877).
+     */
+    context_vk->hack_render_area_trimmed_to_viewport = 0;
+    if (adapter_vk->driver_properties.driverID == VK_DRIVER_ID_MOLTENVK &&
+            !attachment_count)
+    {
+        WARN("No attachments, trimming render area to the viewport.\n");
+
+        fb_width = ceilf(state->viewports[0].width);
+        fb_height = ceilf(-state->viewports[0].height);
+        fb_desc.layers = 1;
+
+        offset_x = state->viewports[0].x;
+        offset_y = state->viewports[0].y + state->viewports[0].height;
+
+        context_vk->hack_render_area_trimmed_to_viewport = 1;
+    }
+
     if ((vr = VK_CALL(vkCreateFramebuffer(device_vk->vk_device, &fb_desc, NULL, &context_vk->vk_framebuffer))) < 0)
     {
         WARN("Failed to create Vulkan framebuffer, vr %s.\n", wined3d_debug_vkresult(vr));
@@ -3087,8 +3112,8 @@ static bool wined3d_context_vk_begin_render_pass(struct wined3d_context_vk *cont
     begin_info.pNext = NULL;
     begin_info.renderPass = context_vk->vk_render_pass;
     begin_info.framebuffer = context_vk->vk_framebuffer;
-    begin_info.renderArea.offset.x = 0;
-    begin_info.renderArea.offset.y = 0;
+    begin_info.renderArea.offset.x = offset_x;
+    begin_info.renderArea.offset.y = offset_y;
     begin_info.renderArea.extent.width = fb_width;
     begin_info.renderArea.extent.height = fb_height;
     begin_info.pClearValues = clear_values;
@@ -4023,7 +4048,9 @@ VkCommandBuffer wined3d_context_vk_apply_draw_state(struct wined3d_context_vk *c
 
     wined3d_context_vk_load_buffers(context_vk, state, indirect_vk, indexed);
 
-    if (wined3d_context_is_graphics_state_dirty(&context_vk->c, STATE_FRAMEBUFFER))
+    if (wined3d_context_is_graphics_state_dirty(&context_vk->c, STATE_FRAMEBUFFER) ||
+            (context_vk->hack_render_area_trimmed_to_viewport &&
+            wined3d_context_is_graphics_state_dirty(&context_vk->c, STATE_VIEWPORT)))
         wined3d_context_vk_end_current_render_pass(context_vk);
 
     if (!wined3d_context_vk_begin_render_pass(context_vk, state, vk_info))
diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index c2e91b38bad..306be90543c 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -3477,13 +3477,25 @@ done:
 
 static struct wined3d_adapter *wined3d_adapter_create(unsigned int ordinal, DWORD wined3d_creation_flags)
 {
+    struct wined3d_adapter *adapter = NULL;
+
     if (wined3d_creation_flags & WINED3D_NO3D)
         return wined3d_adapter_no3d_create(ordinal, wined3d_creation_flags);
 
     if (wined3d_settings.renderer == WINED3D_RENDERER_VULKAN)
         return wined3d_adapter_vk_create(ordinal, wined3d_creation_flags);
 
-    return wined3d_adapter_gl_create(ordinal, wined3d_creation_flags);
+    if (wined3d_settings.renderer == WINED3D_RENDERER_OPENGL)
+        return wined3d_adapter_gl_create(ordinal, wined3d_creation_flags);
+
+    /* CW HACK 18311: Use the Vulkan renderer on macOS. */
+    if ((adapter = wined3d_adapter_vk_create(ordinal, wined3d_creation_flags)))
+        ERR_(winediag)("Using the Vulkan renderer for d3d10/11 applications.\n");
+
+    if (!adapter)
+        adapter = wined3d_adapter_gl_create(ordinal, wined3d_creation_flags);
+
+    return adapter;
 }
 
 static void STDMETHODCALLTYPE wined3d_null_wined3d_object_destroyed(void *parent) {}
diff --git a/dlls/wined3d/swapchain.c b/dlls/wined3d/swapchain.c
index 2811e588ecd..5c1f2200299 100644
--- a/dlls/wined3d/swapchain.c
+++ b/dlls/wined3d/swapchain.c
@@ -917,7 +917,13 @@ static HRESULT wined3d_swapchain_vk_create_vulkan_swapchain(struct wined3d_swapc
         goto fail;
     }
 
-    image_count = desc->backbuffer_count;
+    /* For CW bug 18838. Create MoltenVK swapchains with 3 images, as
+     * recommended by the MoltenVK documentation. Performance of full-screen
+     * swapchains is atrocious with the only other supported image count of 2. */
+    if (adapter_vk->driver_properties.driverID == VK_DRIVER_ID_MOLTENVK)
+        image_count = 3;
+    else
+        image_count = desc->backbuffer_count;
     if (image_count < surface_caps.minImageCount)
         image_count = surface_caps.minImageCount;
     else if (surface_caps.maxImageCount && image_count > surface_caps.maxImageCount)
diff --git a/dlls/wined3d/wined3d_vk.h b/dlls/wined3d/wined3d_vk.h
index 55f40d5a831..9f799a358a0 100644
--- a/dlls/wined3d/wined3d_vk.h
+++ b/dlls/wined3d/wined3d_vk.h
@@ -654,7 +654,8 @@ struct wined3d_context_vk
 
     uint32_t update_compute_pipeline : 1;
     uint32_t update_stream_output : 1;
-    uint32_t padding : 30;
+    uint32_t hack_render_area_trimmed_to_viewport : 1;
+    uint32_t padding : 29;
 
     struct
     {
@@ -806,6 +807,7 @@ struct wined3d_adapter_vk
 
     VkPhysicalDeviceLimits device_limits;
     VkPhysicalDeviceMemoryProperties memory_properties;
+    VkPhysicalDeviceDriverProperties driver_properties;
 };
 
 static inline struct wined3d_adapter_vk *wined3d_adapter_vk(struct wined3d_adapter *adapter)
-- 
2.49.0

